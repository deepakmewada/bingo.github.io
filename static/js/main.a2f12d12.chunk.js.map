{"version":3,"sources":["components/Offline.js","App.js","reportWebVitals.js","index.js"],"names":["bingoArray","Offline","useState","list","setList","count","setCount","winLen","setWinLen","setWinArr","pending","setPending","useEffect","resetBingo","win","winArrz","lastArr","filterData","filter","item","not","newArr","map","push","num","i","length","every","j","includes","console","log","listArr","newObj","setHTML","a","value","virtualCount","className","onClick","someOther","ranNums","Math","floor","random","splice","x","randomNumber","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a2f12d12.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nconst bingoArray = [\r\n  [1, 2, 3, 4, 5],\r\n  [6, 7, 8, 9, 10],\r\n  [11, 12, 13, 14, 15],\r\n  [16, 17, 18, 19, 20],\r\n  [21, 22, 23, 24, 25],\r\n  [1, 6, 11, 16, 21],\r\n  [2, 7, 12, 17, 22],\r\n  [3, 8, 13, 18, 23],\r\n  [4, 9, 14, 19, 24],\r\n  [5, 10, 15, 20, 25],\r\n  [1, 7, 13, 19, 25],\r\n  [5, 9, 13, 17, 21],\r\n];\r\n\r\nexport default function Offline() {\r\n  const [list, setList] = useState([]);\r\n  const [count, setCount] = useState(0);\r\n  const [winLen, setWinLen] = useState(0);\r\n  const [winArr, setWinArr] = useState([]);\r\n  const [pending, setPending] = useState(26);\r\n\r\n  useEffect(() => {\r\n    resetBingo();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (count == 25) {\r\n      let win = 0;\r\n      let winArrz = [];\r\n      let lastArr = null;\r\n      let filterData = list.filter((item) => item.not === true);\r\n      let newArr = [];\r\n      filterData.map((item) => {\r\n        newArr.push(item.num);\r\n      });\r\n      for (let i = 0; i < bingoArray.length; i++) {\r\n        if (bingoArray[i].every((j) => newArr.includes(j))) {\r\n          if (lastArr !== i) {\r\n            win += 1;\r\n            lastArr = i;\r\n            winArrz.push(bingoArray[i]);\r\n          }\r\n        }\r\n      }\r\n      setWinArr([...winArrz]);\r\n      setWinLen(win);\r\n      setPending(pending - 1);\r\n      console.log(newArr);\r\n    }\r\n  }, [list]);\r\n\r\n  const resetBingo = () => {\r\n    let listArr = [];\r\n    for (let i = 1; i < 26; i++) {\r\n      let newObj = { num: i };\r\n      listArr.push(newObj);\r\n    }\r\n    setList(listArr);\r\n    setCount(0);\r\n    setWinLen(0);\r\n  };\r\n\r\n  const randomNumber = () => {\r\n    if (list.length > 0) {\r\n      let someOther = list;\r\n      const newArr = [...list];\r\n      const ranNums = [];\r\n      let i = newArr.length;\r\n      let j = 0;\r\n\r\n      while (i--) {\r\n        j = Math.floor(Math.random() * (i + 1));\r\n        ranNums.push(newArr[j].num);\r\n        newArr.splice(j, 1);\r\n      }\r\n      for (let x = 1; x < 26; x++) {\r\n        someOther[x - 1].value = ranNums[x - 1];\r\n      }\r\n      setList([...someOther]);\r\n      setCount(25);\r\n    }\r\n  };\r\n\r\n  const setHTML = async (num) => {\r\n    if (count === 25) {\r\n      let newArr = list;\r\n      if (!newArr[num - 1].not) {\r\n        newArr[num - 1].not = true;\r\n      }\r\n      setList([...newArr]);\r\n    } else {\r\n      let newArr = list;\r\n      if (!newArr[num - 1].value) {\r\n        let virtualCount = count + 1;\r\n        setCount(virtualCount);\r\n        newArr[num - 1].value = virtualCount;\r\n      }\r\n      setList([...newArr]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"root\">\r\n      <div className=\"AppWrap\">\r\n        <h1>\r\n          <span className={winLen > 0 ? \"line\" : \"\"}>B</span>\r\n          <span className={winLen > 1 ? \"line\" : \"\"}>I</span>\r\n          <span className={winLen > 2 ? \"line\" : \"\"}>N</span>\r\n          <span className={winLen > 3 ? \"line\" : \"\"}>G</span>\r\n          <span className={winLen > 4 ? \"line\" : \"\"}>O</span>\r\n        </h1>\r\n        <div className=\"list\">\r\n          {list &&\r\n            list.map((item, i) => (\r\n              <div\r\n                key={i}\r\n                className={item.not && item.not ? \"disabled\" : \"\"}\r\n                onClick={() => setHTML(item.num)}\r\n              >\r\n                {item.value} {item.not}\r\n              </div>\r\n            ))}\r\n          {winLen > 4 ? <div className=\"overlay\">You Won</div> : null}\r\n        </div>\r\n        <div className=\"btn-wrap\">\r\n          <button\r\n            onClick={() => randomNumber()}\r\n            className=\"btn btn-sm btn-dark\"\r\n          >\r\n            Random\r\n          </button>{\" \"}\r\n          &nbsp;\r\n          <button\r\n            onClick={() => resetBingo()}\r\n            className=\"btn btn-sm btn-danger\"\r\n          >\r\n            Reset\r\n          </button>\r\n        </div>\r\n        <span>Pending Number Count : {count == \"25\" ? pending : null}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import './App.css';\nimport Offline from './components/Offline';\n\nfunction App() {\n  return (\n    <div>\n      <Offline/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}